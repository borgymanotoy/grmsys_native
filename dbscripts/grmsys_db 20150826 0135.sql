-- Script was generated by Devart dbForge Studio for MySQL, Version 6.0.128.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 8/26/2015 1:35:37 AM
-- Server version: 5.6.26-log
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE grmsys_db;

--
-- Definition for table user
--
DROP TABLE IF EXISTS user;
CREATE TABLE user (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  username VARCHAR(45) NOT NULL,
  password VARCHAR(100) NOT NULL,
  firstname VARCHAR(45) NOT NULL,
  lastname VARCHAR(45) NOT NULL,
  middlename VARCHAR(45) DEFAULT NULL,
  contactno VARCHAR(25) DEFAULT NULL,
  address MEDIUMTEXT DEFAULT NULL,
  birthdate DATE DEFAULT NULL,
  gender CHAR(1) NOT NULL DEFAULT 'M',
  is_active TINYINT(4) DEFAULT 1,
  creation_date DATETIME NOT NULL,
  last_modified_date DATETIME DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX id_UNIQUE (id),
  UNIQUE INDEX username_UNIQUE (username)
)
ENGINE = INNODB
AUTO_INCREMENT = 2
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'System Users Table containing user information. This table could be divided into plain user login info and user profile infos.';

--
-- Definition for table item
--
DROP TABLE IF EXISTS item;
CREATE TABLE item (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  price DECIMAL(11, 2) NOT NULL DEFAULT 0.00,
  user_id INT(10) UNSIGNED NOT NULL DEFAULT 1,
  creation_date DATETIME DEFAULT NULL,
  last_modified_date DATETIME DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE INDEX id_UNIQUE (id),
  CONSTRAINT FK_item_user_id FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table member
--
DROP TABLE IF EXISTS member;
CREATE TABLE member (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  firstname VARCHAR(45) NOT NULL,
  lastname VARCHAR(45) NOT NULL,
  middlename VARCHAR(45) DEFAULT NULL,
  contactno VARCHAR(25) DEFAULT NULL,
  address TEXT DEFAULT NULL,
  birthdate DATE DEFAULT NULL,
  gender CHAR(1) NOT NULL DEFAULT 'M',
  emergency_contact_person VARCHAR(125) NOT NULL,
  emergency_contact_number VARCHAR(25) NOT NULL,
  emergency_contact_relationship VARCHAR(45) NOT NULL,
  creation_date DATETIME NOT NULL,
  last_modified_date DATETIME DEFAULT NULL,
  user_id INT(10) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (id),
  UNIQUE INDEX id_UNIQUE (id),
  CONSTRAINT fk_member_user_id FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'System members table. This table holds info regarding membership profile(s).';

--
-- Definition for table item_sales
--
DROP TABLE IF EXISTS item_sales;
CREATE TABLE item_sales (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  item_id INT(10) UNSIGNED NOT NULL DEFAULT 0,
  qty INT(11) NOT NULL,
  amount DECIMAL(11, 2) NOT NULL,
  sales_date DATETIME NOT NULL,
  member_id INT(11) UNSIGNED DEFAULT NULL,
  user_id INT(10) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (id),
  INDEX fk_item_id_idx (item_id),
  UNIQUE INDEX id_UNIQUE (id),
  CONSTRAINT fk_item_sales_item_id FOREIGN KEY (item_id)
    REFERENCES item(id) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT fk_item_sales_member_id FOREIGN KEY (member_id)
    REFERENCES member(id) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_item_sales_user_id FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table membership_type
--
DROP TABLE IF EXISTS membership_type;
CREATE TABLE membership_type (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  member_id INT(10) UNSIGNED NOT NULL,
  type VARCHAR(15) NOT NULL DEFAULT 'Walk-in',
  discounted TINYINT(1) NOT NULL DEFAULT 0,
  service_type VARCHAR(15) NOT NULL DEFAULT 'weights',
  monthly_startdate DATE DEFAULT NULL,
  monthly_enddate DATE DEFAULT NULL,
  creation_date DATETIME NOT NULL,
  last_modified_date DATETIME DEFAULT NULL,
  user_id INT(10) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (id),
  UNIQUE INDEX id_UNIQUE (id),
  CONSTRAINT fk_membership_type_member_id FOREIGN KEY (member_id)
    REFERENCES member(id) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT fk_membership_type_user_id FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Membership Type table. Holds information about the type of membership like walk-in/monthly, services applied, discounted, etc.';

--
-- Definition for table workout_sales
--
DROP TABLE IF EXISTS workout_sales;
CREATE TABLE workout_sales (
  id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  member_id INT(10) UNSIGNED NOT NULL DEFAULT 0,
  workout_date DATE NOT NULL,
  service_type VARCHAR(15) NOT NULL DEFAULT 'weights',
  rendered_amount DECIMAL(11, 2) NOT NULL DEFAULT 0.00,
  creation_date DATETIME DEFAULT NULL,
  user_id INT(10) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (id),
  INDEX fk_member_id_idx (member_id),
  INDEX fk_user_id_idx (user_id),
  UNIQUE INDEX id_UNIQUE (id),
  CONSTRAINT fk_workout_sales_member_id FOREIGN KEY (member_id)
    REFERENCES member(id) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT fk_workout_sales_user_id FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET utf8
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Definition for procedure pAddMemberInfo
--
DROP PROCEDURE IF EXISTS pAddMemberInfo$$
CREATE PROCEDURE pAddMemberInfo(IN pMemberId VARCHAR(255), IN pFirstname VARCHAR(50), IN pLastname VARCHAR(50), IN pMiddlename VARCHAR(50), IN pContactNo VARCHAR(50), IN pAddress TEXT, IN pBirthdate DATETIME, IN pGender CHAR(1), IN pEmergencyContactPerson VARCHAR(255), IN pEmergencyContactNo VARCHAR(50), IN pEmergencyContactRelation VARCHAR(50), IN pMemberType VARCHAR(255), IN pHasDiscount TINYINT, IN pMemberServiceType VARCHAR(255), IN pMonthlyStartDate DATE, IN pMonthlyEndDate VARCHAR(255), IN pUserId INT(10))
  SQL SECURITY INVOKER
  COMMENT 'Stored Procedure for adding member and member type.'
BEGIN
  IF 0 < pMemberId THEN
    UPDATE member SET
      firstname = pFirstname,
      lastname = pLastname,
      middlename = pMiddlename,
      contactno = pContactNo,
      address = pAddress,
      birthdate = pBirthdate,
      gender = pGender,
      emergency_contact_person = pEmergencyContactPerson,
      emergency_contact_number = pEmergencyContactNo,
      emergency_contact_relationship = pEmergencyContactRelation,
      last_modified_date = now()
    WHERE
      id = pMemberId;

    UPDATE membership_type SET
      type = pMemberType,
      discounted = pHasDiscount,
      service_type = pMemberServiceType,
      monthly_startdate = pMonthlyStartDate,
      monthly_enddate = pMonthlyEndDate,
      last_modified_date = now()
    WHERE
      member_id = pMemberId;
  ELSE
    INSERT INTO MEMBER(firstname, lastname, middlename, contactno, address, birthdate, gender, emergency_contact_person, emergency_contact_number, emergency_contact_relationship, user_id, creation_date, last_modified_date) VALUES(pFirstname, pLastname, pMiddlename, pContactNo, pAddress, pBirthdate, pGender, pEmergencyContactPerson, pEmergencyContactNo, pEmergencyContactRelation, pUserId, now(), now());
    INSERT INTO MEMBERSHIP_TYPE(member_id, type, discounted, service_type, monthly_startdate, monthly_enddate, user_id, creation_date, last_modified_date) VALUES(LAST_INSERT_ID(), pMemberType, pHasDiscount, pMemberServiceType, pMonthlyStartDate, pMonthlyEndDate, pUserId, now(), now());
  END IF;
  
  COMMIT;
END
$$

--
-- Definition for procedure pAddOrUpdateItem
--
DROP PROCEDURE IF EXISTS pAddOrUpdateItem$$
CREATE PROCEDURE pAddOrUpdateItem(IN pItemId INT, IN pItemName VARCHAR(100), IN pItemPrice DECIMAL(11,2), IN pUserId INT)
  SQL SECURITY INVOKER
BEGIN
  IF 0 < pItemId THEN
    UPDATE item SET
      name = pItemName,
      price = pItemPrice,
      last_modified_date = now()
    WHERE id = pItemId;
  ELSE
    INSERT INTO item(name, price, user_id, creation_date, last_modified_date) VALUES(pItemName, pItemPrice, pUserId, now(), now());
  END IF;

  COMMIT;
END
$$

--
-- Definition for procedure pAddOrUpdateUser
--
DROP PROCEDURE IF EXISTS pAddOrUpdateUser$$
CREATE PROCEDURE pAddOrUpdateUser(IN pUserId INT, IN pUsername VARCHAR(50), IN pPassword VARCHAR(255), IN pFirstname VARCHAR(50), IN pLastname VARCHAR(50), IN pMiddlename VARCHAR(50), IN pContactNo VARCHAR(25), IN pAddress TEXT, IN pBirthdate DATETIME, IN pGender CHAR(1))
  SQL SECURITY INVOKER
  COMMENT 'Stored Procedure for Adding or Updating User'
BEGIN
  IF 0 < pUserId THEN
    -- Update Statement
    UPDATE User SET
      username = pUsername,
      password = pPassword,
      firstname = pFirstname,
      lastname = pLastname,
      middlename = pMiddlename,
      contactno = pContactNo,
      address = pAddress,
      birthdate = pBirthdate,
      gender = pGender,
      last_modified_date = now()
    WHERE id = pUserId;
  ELSE
    -- Insert Statement
    INSERT INTO User(username, password, firstname, lastname, middlename, contactno, address, birthdate, gender, is_active, creation_date, last_modified_date) VALUES (pUsername, pPassword, pFirstname, pLastname, pMiddlename, pContactNo, pAddress, pBirthdate, pGender, 1, now(), now());
  END IF;

  COMMIT;
END
$$

--
-- Definition for procedure pAddSellItem
--
DROP PROCEDURE IF EXISTS pAddSellItem$$
CREATE PROCEDURE pAddSellItem(IN pItemId INT, IN pItemQty VARCHAR(255), IN pTotalAmount DECIMAL, IN pMemberId INT, IN pUserId INT)
  SQL SECURITY INVOKER
  COMMENT 'Stored Procedure for Adding sell item'
BEGIN
  INSERT INTO item_sales(item_id, qty, amount, sales_date, member_id, user_id) VALUES(pItemId, pItemQty, pTotalAmount, now(), pMemberId, pUserId);
  COMMIT;
END
$$

--
-- Definition for procedure pRegisterMemberWorkout
--
DROP PROCEDURE IF EXISTS pRegisterMemberWorkout$$
CREATE PROCEDURE pRegisterMemberWorkout(IN pMemberId INT, IN pServiceType VARCHAR(255), IN pAmount DECIMAL)
  SQL SECURITY INVOKER
  COMMENT 'Stored Procedure for Registering Member Workout'
BEGIN
  INSERT INTO workout_sales(member_id, workout_date, service_type, rendered_amount, creation_date, last_modified_date) VALUES(pMemberId, now(), pServiceType, pAmount, now(), now());
  COMMIT;
END
$$

--
-- Definition for procedure pRemoveItem
--
DROP PROCEDURE IF EXISTS pRemoveItem$$
CREATE PROCEDURE pRemoveItem(IN pItemId VARCHAR(255), OUT nSuccess INT)
  SQL SECURITY INVOKER
  COMMENT 'Stored Procedure for removing an item.'
BEGIN
  DECLARE nItemCount INT(10);
  SET nSuccess = 1;

  SELECT COUNT(is1.id) INTO nItemCount FROM item_sales is1 WHERE is1.item_id = pItemId;

  IF 0 < nItemCount THEN
    SET nSuccess = 0;
  ELSE
    DELETE FROM ITEM_SALES WHERE ITEM_ID = pItemId;
    DELETE FROM ITEM WHERE ID = pItemId;
    COMMIT;
  END IF;

END
$$

--
-- Definition for procedure pRemoveMember
--
DROP PROCEDURE IF EXISTS pRemoveMember$$
CREATE PROCEDURE pRemoveMember(IN pMemberId VARCHAR(255), OUT nSuccess INT)
  SQL SECURITY INVOKER
BEGIN
  DECLARE nMemberCount INT(10);

  SET nSuccess = 1;

  SELECT COUNT(ws.id) INTO nMemberCount FROM workout_sales ws WHERE ws.member_id = pMemberId;

  IF 0 < nMemberCount THEN
    SET nSuccess = 0;
  ELSE
    DELETE FROM MEMBESHIP_TYPE WHERE MEMBER_ID = pMemberId;
    DELETE FROM MEMBER WHERE ID = pMemberId;
    COMMIT;
  END IF;

END
$$

--
-- Definition for procedure pRemoveUser
--
DROP PROCEDURE IF EXISTS pRemoveUser$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE pRemoveUser(IN pUserId VARCHAR(255))
BEGIN
  UPDATE USER SET is_active = 0 WHERE id = pUserId;
  COMMIT;
END
$$

--
-- Definition for procedure pUpdateMasterPassword
--
DROP PROCEDURE IF EXISTS pUpdateMasterPassword$$
CREATE PROCEDURE pUpdateMasterPassword(IN pMasterPassword varchar(255), IN pNewPassword varchar(255), OUT nResult tinyint)
  SQL SECURITY INVOKER
BEGIN
  SET nResult = 0;

  IF !ISNULL(pMasterPassword) AND !ISNULL(pNewPassword) THEN
    IF 0 < fnCheckMasterPassword(pMasterPassword) THEN
      UPDATE user
      SET password = pNewPassword
      WHERE username = 'administrator';
      SET nResult = 1;
      COMMIT;
    END IF;
  END IF;
END
$$

--
-- Definition for function fnCheckMasterPassword
--
DROP FUNCTION IF EXISTS fnCheckMasterPassword$$
CREATE FUNCTION fnCheckMasterPassword(masterPassword varchar(255))
  RETURNS tinyint(4)
  SQL SECURITY INVOKER
BEGIN
  DECLARE sPassword varchar(100);

  SELECT
    u.password INTO sPassword
  FROM user u
  WHERE u.username = 'administrator'
  LIMIT 1;

  RETURN IF(sPassword = masterPassword, 1, 0);
END
$$

--
-- Definition for function fnCheckUserLogin
--
DROP FUNCTION IF EXISTS fnCheckUserLogin$$
CREATE FUNCTION fnCheckUserLogin(pUsername varchar(255), pPassword varchar(255))
  RETURNS int(11)
  SQL SECURITY INVOKER
BEGIN
  DECLARE sPassword varchar(100);
  DECLARE nResult tinyint(1);

  SET nResult = 0;

  IF !ISNULL(pUsername) AND !ISNULL(pPassword) THEN
    SELECT
      u.password INTO sPassword
    FROM user u
    WHERE u.username = pUsername
    LIMIT 1;
    SET nResult = IF(sPassword = pPassword, 1, 0);
  END IF;

  RETURN nResult;
END
$$

DELIMITER ;

--
-- Definition for view vw_item_sales
--
DROP VIEW IF EXISTS vw_item_sales CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW vw_item_sales
AS
	select `isl`.`id` AS `id`,`isl`.`item_id` AS `item_id`,`i`.`name` AS `item_name`,`i`.`price` AS `item_price`,`isl`.`qty` AS `qty`,`isl`.`amount` AS `item_total`,`isl`.`sales_date` AS `sales_date`,`isl`.`member_id` AS `member_id`,if(isnull(`isl`.`member_id`),'Anonymous',trim(concat(ifnull(`m`.`firstname`,''),' ',if((`m`.`middlename` is not null),concat(substr(`m`.`middlename`,1,1),'. '),''),ifnull(`m`.`lastname`,'')))) AS `customer_name`,`isl`.`user_id` AS `user_id` from ((`item_sales` `isl` join `item` `i` on((`i`.`id` = `isl`.`item_id`))) left join `member` `m` on((`m`.`id` = `isl`.`member_id`)));

--
-- Definition for view vw_members
--
DROP VIEW IF EXISTS vw_members CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW vw_members
AS
	select `m`.`id` AS `member_id`,`m`.`firstname` AS `firstname`,`m`.`lastname` AS `lastname`,`m`.`middlename` AS `middlename`,trim(concat(ifnull(`m`.`firstname`,''),' ',if((`m`.`middlename` is not null),concat(substr(`m`.`middlename`,1,1),'. '),''),ifnull(`m`.`lastname`,''))) AS `member_name`,`m`.`contactno` AS `contactno`,`m`.`address` AS `address`,`m`.`birthdate` AS `birthdate`,`m`.`gender` AS `gender`,`m`.`emergency_contact_person` AS `emergency_contact_person`,`m`.`emergency_contact_number` AS `emergency_contact_number`,`m`.`emergency_contact_relationship` AS `emergency_contact_relationship`,`mt`.`id` AS `membership_type_id`,`mt`.`type` AS `membership_type`,`mt`.`discounted` AS `has_discount`,`mt`.`service_type` AS `service_type`,`mt`.`monthly_startdate` AS `monthly_startdate`,`mt`.`monthly_enddate` AS `monthly_enddate` from (`member` `m` join `membership_type` `mt` on((`mt`.`member_id` = `m`.`id`)));

--
-- Definition for view vw_users
--
DROP VIEW IF EXISTS vw_users CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW vw_users
AS
	select `u`.`id` AS `user_id`,`u`.`firstname` AS `firstname`,`u`.`lastname` AS `lastname`,`u`.`middlename` AS `middlename`,trim(concat(ifnull(`u`.`firstname`,''),' ',if((`u`.`middlename` is not null),concat(substr(`u`.`middlename`,1,1),'. '),''),ifnull(`u`.`lastname`,''))) AS `user_name`,`u`.`contactno` AS `contactno`,`u`.`address` AS `address`,`u`.`birthdate` AS `birthdate`,`u`.`gender` AS `gender`,`u`.`creation_date` AS `creation_date`,`u`.`last_modified_date` AS `last_modified_date` from `user` `u` where ((`u`.`id` > 1) and (`u`.`is_active` = 1));

--
-- Definition for view vw_workout_sales
--
DROP VIEW IF EXISTS vw_workout_sales CASCADE;
CREATE OR REPLACE 
	DEFINER = 'root'@'localhost'
VIEW vw_workout_sales
AS
	select `ws`.`id` AS `id`,`ws`.`workout_date` AS `workout_date`,`ws`.`member_id` AS `member_id`,trim(concat(ifnull(`m`.`firstname`,''),' ',if((`m`.`middlename` is not null),concat(substr(`m`.`middlename`,1,1),'. '),''),ifnull(`m`.`lastname`,''))) AS `member_name`,`ws`.`service_type` AS `service_type`,`ws`.`rendered_amount` AS `rendered_amount`,`ws`.`user_id` AS `user_id`,trim(concat(ifnull(`u`.`firstname`,''),' ',if((`u`.`middlename` is not null),concat(substr(`u`.`middlename`,1,1),'. '),''),ifnull(`u`.`lastname`,''))) AS `user_name` from ((`workout_sales` `ws` join `member` `m` on((`m`.`id` = `ws`.`member_id`))) join `user` `u` on((`u`.`id` = `ws`.`user_id`)));

-- 
-- Dumping data for table user
--
INSERT INTO user VALUES
(1, 'administrator', '@dm!n!str@t0r', 'GrmSys', 'Administrator', 'Admin', NULL, NULL, NULL, 'M', 1, '2015-08-21 23:49:07', '2015-08-21 23:49:09');

-- 
-- Dumping data for table item
--

-- Table grmsys_db.item does not contain any data (it is empty)

-- 
-- Dumping data for table member
--

-- Table grmsys_db.member does not contain any data (it is empty)

-- 
-- Dumping data for table item_sales
--

-- Table grmsys_db.item_sales does not contain any data (it is empty)

-- 
-- Dumping data for table membership_type
--

-- Table grmsys_db.membership_type does not contain any data (it is empty)

-- 
-- Dumping data for table workout_sales
--

-- Table grmsys_db.workout_sales does not contain any data (it is empty)

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;